// Base AI Provider - Abstract Strategy Pattern
class AIProvider {
    constructor(apiKey) {
        this.apiKey = apiKey;
        this.name = 'Base Provider';
        this.models = [];
    }

    // Abstract methods to be implemented by concrete providers
    async sendMessage(messages, systemPrompt) {
        throw new Error('sendMessage method must be implemented by concrete provider');
    }

    validateApiKey(apiKey) {
        throw new Error('validateApiKey method must be implemented by concrete provider');
    }

    getModels() {
        return this.models;
    }

    getName() {
        return this.name;
    }

    // Common prompt building method
    buildIronyPrompt(level, language, exerciseHistory = []) {
        const basePrompt = `–¢—ã –æ–ø—ã—Ç–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –∏—Å–∫—É—Å—Å—Ç–≤–∞ –∏—Ä–æ–Ω–∏–∏ –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è. 

–í–ê–ñ–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
- "–≠–∫–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å" - –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –º–æ—Ä–∞–ª—å–Ω–æ–π –ø–æ–±–µ–¥–µ –Ω–∞–¥ –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–º
- –ò—Ä–æ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –∏ –∏–∑—ã—Å–∫–∞–Ω–Ω–æ–π
- –¶–µ–ª—å: –≤—ã–∏–≥—Ä–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –Ω–µ –ø–æ–Ω—è–ª —á—Ç–æ –ø—Ä–æ–∏–≥—Ä–∞–ª
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–ª—É –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –ø—Ä–æ—Ç–∏–≤ –Ω–µ–≥–æ —Å–∞–º–æ–≥–æ (–∫–∞–∫ –≤ –∞–π–∫–∏–¥–æ)

–£–†–û–í–ï–ù–¨ –£–ß–ï–ù–ò–ö–ê: ${level}
–Ø–ó–´–ö –û–ë–£–ß–ï–ù–ò–Ø: ${language}

–ó–ê–î–ê–ß–ê: –î–∞–π –æ–¥–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –§–æ—Ä–º–∞—Ç:
1. –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏–ª–∏ –¥–∏–∞–ª–æ–≥–∞
2. –ó–∞–¥–∞–Ω–∏–µ (—á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å)
3. –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞
4. –ü—Ä–∏–º–µ—Ä —Ö–æ—Ä–æ—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)

${exerciseHistory.length > 0 ? `–ò–°–¢–û–†–ò–Ø –ü–†–ï–î–´–î–£–©–ò–• –£–ü–†–ê–ñ–ù–ï–ù–ò–ô:\n${exerciseHistory.join('\n')}\n` : ''}

–ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º, –Ω–æ —Ç–æ—á–Ω—ã–º. –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –∏ –ø—Ä–∏–º–µ–Ω–∏–º—ã–º –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏.`;

        return basePrompt;
    }

    // Common analysis prompt
    buildAnalysisPrompt(userResponse, exercise, language) {
        return `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –∏—Ä–æ–Ω–∏–∏:

–£–ü–†–ê–ñ–ù–ï–ù–ò–ï: ${exercise}
–û–¢–í–ï–¢ –£–ß–ï–ù–ò–ö–ê: ${userResponse}
–Ø–ó–´–ö: ${language}

–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
‚úÖ –ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ö–æ—Ä–æ—à–æ:
‚ö†Ô∏è –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:
üí° –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:
üéØ –û—Ü–µ–Ω–∫–∞ (1-10):

–ë—É–¥—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º.`;
    }

    // Utility method for handling API errors
    handleApiError(error) {
        console.error(`${this.name} API Error:`, error);
        
        if (error.message?.includes('401') || error.message?.includes('unauthorized')) {
            return '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞.';
        }
        
        if (error.message?.includes('429') || error.message?.includes('rate limit')) {
            return '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        }
        
        if (error.message?.includes('insufficient_quota')) {
            return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ API.';
        }
        
        return `–û—à–∏–±–∫–∞ ${this.name}: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
    }
}

// Export for use in other files
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AIProvider;
} else {
    window.AIProvider = AIProvider;
}